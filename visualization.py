# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kEqMklunF55XMNW5cob9PeT3cR2C4ZvW

# Latihan

# Read the dataset 1
"""

import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/ganjar87/data_science_practice/main/kc_house_data.csv', delimiter=',')
df.head()

df.describe()

"""# Scatter plot

## sqft_living vs price
"""

import matplotlib.pyplot as plt

plt.scatter(df['sqft_living'], df['price'])
plt.xlabel('sqft_living', fontsize=16)
plt.ylabel('price', fontsize=16)
plt.show()

import seaborn as sns

sns.scatterplot(x='sqft_living', y='price', data=df)
plt.show()

sns.regplot(data=df, x='sqft_living', y='price', line_kws={"color": "red"})
plt.show()

"""## yr_built vs price"""

sns.regplot(data=df, x='yr_built', y='price', line_kws={"color": "red"})
plt.show()

"""# Pearson correlation

## scipy
"""

from scipy.stats import pearsonr
# calculate Pearson's correlation
corr, pval = pearsonr(df['sqft_living'], df['price'])
print('Pearsons correlation: %.3f' % corr)
#print(pval)

"""## numpy"""

import numpy as np
r = np.corrcoef(df['sqft_living'], df['price'])
print(r)
print('Pearsons correlation: %.3f' % r[0,1])

"""## pandas"""

import pandas as pd

r = df['sqft_living'].corr(df['price'])
print('Pearsons correlation: %.3f' % corr)

df.corr()

"""# Read dataset 2"""

import pandas as pd
df_churning = pd.read_csv('https://raw.githubusercontent.com/ganjar87/data_science_practice/main/BankChurners.csv', delimiter=',')
df_churning.head()

"""## histogram"""

import seaborn as sns
sns.displot(data=df_churning, x='Customer_Age')
#sns.displot(data=df_churning, x='Customer_Age', hue='Attrition_Flag', kde=True)
average = df_churning['Customer_Age'].mean()
median = df_churning['Customer_Age'].median()
mode = df_churning['Customer_Age'].mode()
std = df_churning['Customer_Age'].std()

plt.axvline(average, color='r', linestyle='solid', linewidth=3, label='Mean')
plt.axvline(median, color='y', linestyle='dotted', linewidth=3, label='Median')
plt.axvline(mode[0], color='purple', linestyle='dashed', linewidth=3, label='Mode')

plt.show()
print('Average : ', average)
print('Standard deviation : ', std)
print('Median : ', median)
print('Mode : ', int(mode))

"""## probability mass function (pmf)"""

from scipy.stats import norm
import seaborn as sns
import matplotlib.pyplot as plt

#sns.histplot(data=df_churning, x='Education_Level',stat="probability")     
sns.histplot(data=df_churning, x='Education_Level',stat="probability", hue='Attrition_Flag') 
plt.xticks(rotation='45')                                  
plt.show()

df_churning['Education_Level'].value_counts(normalize=True)

sns.histplot(data=df_churning, x='Customer_Age',stat="probability")     
#sns.histplot(data=df_churning, x='Customer_Age',stat="probability", hue='Attrition_Flag') 
plt.xticks(rotation='45')                                  
plt.show()

"""## probability density function (pdf)"""

#sns.displot(data=df_churning, x='Customer_Age', kind="kde", hue='Attrition_Flag')
sns.displot(data=df_churning, x='Customer_Age', kind="kde")
plt.show()

from scipy.stats import norm
average = df_churning['Customer_Age'].mean()
std = df_churning['Customer_Age'].std()

a=norm.cdf(50,average, std)
#b=norm.cdf(40,average, std)
#c=b-a
a

"""## cummulative density function (cdf)"""

#ns.displot(data=df_churning, x='Customer_Age', kind="ecdf", hue='Attrition_Flag')
sns.displot(data=df_churning, x='Customer_Age', kind="ecdf")

plt.show()

sns.histplot(data=df_churning, x='Customer_Age',stat="density", cumulative=True, hue='Attrition_Flag')     
plt.xticks(rotation='45')                                  
plt.show()

from scipy.stats import norm

min = df_churning['Customer_Age'].min()
max = df_churning['Customer_Age'].max()

mean = df_churning['Customer_Age'].mean()
std = df_churning['Customer_Age'].std()


x_pdf = np.linspace(min, max)
y_pdf = norm.pdf(x_pdf, mean, std)
y_cdf = norm.cdf(x_pdf, mean, std)


plt.plot(x_pdf, y_pdf, 'r', lw=2, label='pdf')   
plt.plot(x_pdf, y_cdf, 'b', lw=2, label='cdf')   
plt.legend()                                               
plt.xlabel('Customer age')
plt.show()

"""## normal distribution"""

from scipy.stats import norm

x_pdf = np.linspace(50, 300)
y1_pdf = norm.pdf(x_pdf, 150, 20)
y2_pdf = norm.pdf(x_pdf, 180, 20)


plt.plot(x_pdf, y1_pdf, 'r', lw=2, label='mean=150, std dev=20')   
plt.plot(x_pdf, y2_pdf, 'b', lw=2, label='mean=180, std dev=20')   
plt.legend()                       
plt.xlabel('Tinggi badan')
plt.ylabel('Density')                         
plt.show()

from scipy.stats import norm

x_pdf = np.linspace(50, 300)
y1_pdf = norm.pdf(x_pdf, 160, 10)
y2_pdf = norm.pdf(x_pdf, 160, 30)


plt.plot(x_pdf, y1_pdf, 'r', lw=2, label='mean=160, std dev=10')   
plt.plot(x_pdf, y2_pdf, 'b', lw=2, label='mean=160, std dev=30')   
plt.legend()                       
plt.xlabel('Tinggi badan')
plt.ylabel('Density')                         
plt.show()

from scipy.stats import norm
import numpy as np

min = df_churning['Customer_Age'].min()
max = df_churning['Customer_Age'].max()

mean = df_churning['Customer_Age'].mean()
std = df_churning['Customer_Age'].std()


x_pdf = np.linspace(min, max)
y_pdf = norm.pdf(x_pdf, mean, std)

sns.histplot(data=df_churning, x='Customer_Age',stat="density")
plt.plot(x_pdf, y_pdf, 'r', lw=2, label='pdf')       
plt.legend()                                            
plt.show()

"""## skewness"""

from scipy.stats import skewnorm
from scipy import stats
import matplotlib.pyplot as plt

numValues = 10000
maxValue = 10
left_skewed = -5  #Negative values are left skewed, positive values are right skewed.
right_skewed = 5  #Negative values are left skewed, positive values are right skewed.

random_left = skewnorm.rvs(left_skewed, size=numValues)  #Skewnorm function
random_right = skewnorm.rvs(right_skewed, size=numValues)  #Skewnorm function
#Plot histogram to check skewness

f, axes = plt.subplots(1,2, figsize=(10, 4))
sns.histplot(data=random_left, stat="probability", ax=axes[0])
axes[0].set_title('Left skewed')
axes[0].set_ylabel('probability')

sns.histplot(data=random_right, stat="probability", ax=axes[1])
axes[1].set_title('Right skewed')
axes[1].set_ylabel('probability')

plt.show()

sns.displot(data=df_churning, x='Credit_Limit', kind="kde")
plt.show()

"""# Statistical plot"""

existing_data = df_churning[(df_churning.Attrition_Flag == 'Existing Customer')]
attrited_data = df_churning[(df_churning.Attrition_Flag == 'Attrited Customer')]

"""## pie chart"""

f, axes = plt.subplots(1,2, figsize=(10, 6))
existing_data['Marital_Status'].value_counts().plot(kind='pie',ax=axes[0], title='Existing Customer', autopct='%1.1f%%', shadow=True)
attrited_data['Marital_Status'].value_counts().plot(kind='pie',ax=axes[1], title='Attrited Customer', autopct='%1.1f%%', shadow=True)

plt.tight_layout()
plt.show()

"""## bar plot"""

import seaborn as sns

sns.barplot(x='Education_Level', y='Total_Trans_Amt',data=df_churning, hue='Attrition_Flag')
plt.xticks(rotation='45')   
plt.show()

"""## histogram"""

from scipy.stats import norm

sns.histplot(data=df_churning, x='Education_Level', hue='Attrition_Flag')     
plt.xticks(rotation='45')                                  
plt.show()

"""## scatter plot"""

import seaborn as sns

sns.scatterplot(x='Total_Trans_Ct', y='Total_Trans_Amt', data=df_churning, hue='Attrition_Flag')
plt.show()

"""## boxplot"""

import random
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

salary_data = [int(random.gauss(5000, 1000)) for i in range(2000)]
df_salary = pd.DataFrame(salary_data, columns=['salary_usd'])
print(df_salary)

print(df_salary.describe())

sns.boxplot(data=df_salary)
plt.show()

q1 = df_salary.quantile(0.25);
q3 = df_salary.quantile(0.75);

#print(q1)
min = q1 - (1.5 * (q3-q1))
max = q3 + (1.5 * (q3-q1))
print('batas bawah : ', int(min))
print('batas atas :', int(max))

sns.boxplot(x="Attrition_Flag", y="Customer_Age", data=df_churning)
plt.show()

sns.boxplot(x="Attrition_Flag", y="Credit_Limit", data=df_churning)
plt.show()

"""## heatmap"""

df_group = df_churning.groupby(['Education_Level', 'Income_Category']).size().unstack()
df_group

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

plt.figure(figsize=(10,10))
sns.heatmap(df_group, annot=True,)
plt.title("Heatmap");
plt.show()

"""## heatmap with correlation"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

plt.figure(figsize=(20,15))
sns.heatmap(df_churning.corr(), annot=True, )
plt.title("Heatmap", fontsize = 25);
plt.show()

"""## line plot"""

import pandas as pd
df_iot = pd.read_csv('https://raw.githubusercontent.com/ganjar87/data_science_practice/main/datatraining.txt', delimiter=',')
df_iot.head()
#df_iot.describe()

import matplotlib.pyplot as plt
import matplotlib.dates as dt

df_iot['date'] = pd.to_datetime(df_iot['date'])

figure, axis = plt.subplots(5, figsize=(10, 6))
  
axis[0].plot(df_iot['date'], df_iot['Temperature'])
axis[0].set_title("Temperature")

axis[1].plot(df_iot['date'], df_iot['Humidity'])
axis[1].set_title("Humidity")

axis[2].plot(df_iot['date'], df_iot['Light'])
axis[2].set_title("Light")

axis[3].plot(df_iot['date'], df_iot['CO2'])
axis[3].set_title("CO2")

axis[4].plot(df_iot['date'], df_iot['Occupancy'])
axis[4].set_title("Occupancy")
  
# Combine all the operations and display
figure.tight_layout()
plt.show()